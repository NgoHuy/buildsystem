#!/bin/bash

# Maintainer: Anh K. Huynh <kyanh@theslinux.org>
# Original Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Original Contributor: Allan McRae <allan@archlinux.org>
# Original Contributor: Tom Newsom <Jeepster@gmx.co.uk>

# `sudo` has two different kinds of versions
#
#   x.y.z == x.y.z.0 -> x.y.z     : the main release (aka patch = 0)
#   x.y.z.t (t > 0)  -> x.y.z.pt  : the patches      (aka patch > 0)
#
_sudover="${pkgver%.*}"
[[ "${pkgver##*.}" == "0" ]] || _sudover="${pkgver%.*}p${pkgver##*.}"

pkgdesc="Give certain users the ability to run some commands as root"
arch=('i686' 'x86_64')
url="http://www.sudo.ws/sudo/"
license=('custom')
groups=('base-devel')
depends=('glibc' 'pam')
backup=('etc/sudoers' 'etc/pam.d/sudo')
options=('!libtool')
source=("http://www.sudo.ws/sudo/dist/${pkgbase}-$_sudover.tar.gz"{,.sig}
        "sudo.pam" "new-default-sudoers.patch")

build() {
  cd "$srcdir/$pkgname-$_sudover"
  patch -Np4 < "${srcdir}/new-default-sudoers.patch"
  ./configure \
    --prefix=/usr \
    --libexecdir=/usr/lib \
    --with-logfac=auth \
    --with-pam \
    --with-env-editor \
    --with-passprompt="[sudo] password for %p: " \
    --with-all-insults
  make
}

check() {
  cd "$srcdir/$pkgname-$_sudover"
  make check
}

package() {
  cd "$srcdir/$pkgname-$_sudover"
  make DESTDIR="$pkgdir" install

  install -Dm644 "$srcdir/sudo.pam" "$pkgdir/etc/pam.d/sudo"

  install -Dm644 doc/LICENSE "$pkgdir/usr/share/licenses/sudo/LICENSE"
}

# Notify if there is new version
# * The latest stable version
# * The latest patch for the current version
# * The link to them (!?)
get_update() {
  local _url="http://www.sudo.ws/sudo/stable.html"

  echo "${PACKAGE_BASE}:"

  curl -sL "$_url" 2>/dev/null \
  | ruby \
      -rnokogiri \
      -e "FIRST_PATCH='${PACKAGE_VERSION%.*}'" \
      -e "URL='${_url}'" \
      -e '
        doc = Nokogiri::HTML(STDIN.read)

        ver = doc.xpath("//a[starts-with(@name, \"1.\")]").first
        if ver.respond_to?(:attributes)
          version = ver.attributes["name"].value
          puts "  latest: #{version}"
          puts "  latest.link: #{URL}##{version}"
        end

        ver = doc.xpath("//a[starts-with(@name, \"#{FIRST_PATCH}\")]").first
        if ver.respond_to?(:attributes)
          patch = ver.attributes["name"].value
          unless patch == FIRST_PATCH
            puts "  update: #{patch}"
            puts "  update.link: #{URL}##{patch}"
          end
        end
      '

  [[ ${PIPESTATUS[0]} -eq 0 ]] || echo "  curl: 1"
}
